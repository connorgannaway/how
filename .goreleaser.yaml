# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
      - freebsd
    ignore:
      - goos: darwin
        goarch: 386
    ldflags:
      - -s -w
      - -X main.Version={{.Version}}

archives:
  - formats: [tar.gz]
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats: [zip]

nfpms:
  # note that this is an array of nfpm configs
  - #
    # ID of the nfpm config, must be unique.
    #
    # Default: 'default'.
    id: packages

    # Name of the package.
    #
    # Default: ProjectName.
    # Templates: allowed.
    package_name: how

    # Your app's description.
    #
    # Default: inferred from global metadata.
    description: "AI-powered terminal command assistant."

    license: MIT

    # Formats to be generated.
    formats:
      - apk
      - deb
      - rpm

brews:
  - # Name of the recipe
    #
    # Default: the project name.
    # Templates: allowed.
    name: how

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed.
    url_template: "https://github.com/connorgannaway/how/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Headers to include in the `url` stanza.
    # This can be a more modern alternative to `download_strategy` in some
    # cases.
    url_headers:
      - "Accept: application/octet-stream"
      - 'Authorization: bearer #{ENV["HOMEBREW_GITHUB_API_TOKEN"]}'

    # Allows you to set a custom download strategy. Note that you'll need
    # to implement the strategy and add it to your tap repository.
    # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
    download_strategy: CurlDownloadStrategy

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Directory inside the repository to put the formula.
    directory: Formula

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: "https://github.com/connorgannaway/how"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "AI-powered terminal command assistant."

    # SPDX identifier of your app's license.
    #
    # Default: inferred from global metadata.
    license: "MIT"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    skip_upload: auto

    # Custom install script for brew.
    #
    # Template: allowed
    # Default: 'bin.install "BinaryName"'.
    install: |
      bin.install "how"

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: connorgannaway

      # Repository name.
      #
      # Templates: allowed.
      name: tap

      token: "{{ .Env.HOMEBREW_TOKEN }}"

winget:
  - # Name of the recipe
    #
    # Default: the project name.
    # Templates: allowed.
    name: how

    # Publisher name.
    #
    # Templates: allowed.
    # Required
    publisher: connorgannaway

    # Your app's description.
    #
    # Templates: allowed.
    # Required
    # Default: inferred from global metadata.
    short_description: "AI-powered terminal command assistant."

    # License name.
    #
    # Templates: allowed.
    # Required
    # Default: inferred from global metadata.
    license: "mit"

    # Publisher URL.
    #
    # Templates: allowed.
    publisher_url: https://github.com/connorgannaway/how

    # Publisher support URL.
    #
    # Templates: allowed.
    publisher_support_url: "https://github.com/connorgannaway/how/issues/new"

    # Package identifier.
    #
    # Default: Publisher.ProjectName.
    # Templates: allowed.
    package_identifier: connorgannaway.how

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed.
    url_template: "https://github.com/connorgannaway/how/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "{{ .PackageIdentifier }}: {{ .Tag }}"

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: "https://github.com/connorgannaway/how"

    # Your app's long description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "AI-powered terminal command assistant."

    # Release notes.
    #
    # If you want to use the release notes generated by GoReleaser, use
    # `{{.Changelog}}` as the value.
    #
    # Templates: allowed.
    release_notes: "{{.Changelog}}"

    # Release notes URL.
    # Templates: allowed.
    release_notes_url: "https://github.com/connorgannaway/how/releases/tag/{{.Version}}"

    # Tags.
    #
    # GoReleaser converts all tags to lowercase and replace
    # spaces with hyphens (-) as per winget's best practices.
    tags:
      - golang
      - cli
      - ai

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: connorgannaway

      # Repository name.
      #
      # Templates: allowed.
      name: winget-pkgs

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed.
      token: "{{ .Env.WINGET_TOKEN }}"

    # Git author used to commit to the repository.
    #
    # Since: v2.11
    # Default: inferred from global metadata (Since v2.12).
    commit_author:
      # Git author name.
      #
      # Templates: allowed.
      name: goreleaserbot

      # Git author email.
      #
      # Templates: allowed.
      email: bot@goreleaser.com

scoops:
  - # Name of the recipe
    #
    # Default: the project name.
    # Templates: allowed.
    name: how

    # URL which is determined by the given Token (github or gitlab)
    #
    # Default:
    #   GitHub: 'https://github.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}'
    #   GitLab: 'https://gitlab.com/<repo_owner>/<repo_name>/-/releases/{{ .Tag }}/downloads/{{ .ArtifactName }}'
    #   Gitea: 'https://gitea.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}'
    # Templates: allowed.
    url_template: "https://github.com/connorgannaway/how/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Directory inside the repository to put the scoop.
    #
    # Note that while scoop works if the manifests are in a directory,
    # 'scoop bucket list' will show 0 manifests if they are not in the root
    # directory.
    # In short, it's generally better to leave this empty.
    directory: Scoops

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Scoop update for {{ .ProjectName }} version {{ .Tag }}"

    # Your app's homepage.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    homepage: "https://github.com/connorgannaway/how"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "AI-powered terminal command assistant."

    # Your app's license
    #
    # Default: inferred from global metadata.
    license: MIT

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: connorgannaway

      # Repository name.
      #
      # Templates: allowed.
      name: scoops

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed.
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed.
      token: "{{ .Env.SCOOP_TOKEN }}"

    # Git author used to commit to the repository.
    #
    # Since: v2.11
    # Default: inferred from global metadata (Since v2.12).
    commit_author:
      # Git author name.
      #
      # Templates: allowed.
      name: goreleaserbot

      # Git author email.
      #
      # Templates: allowed.
      email: bot@goreleaser.com

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"

release:
  footer: >-

    ---

    Released by [GoReleaser](https://github.com/goreleaser/goreleaser).
